/*!
@class QJsonSerializer

This class is the modules core component. It performs the de/serialization. Normally, you will
only use the public members of this class. However, in some cases, you may have to add custom
code to properly serialize special classes. In order to modify the general serialization
behavior, have a look at the properties.

@section supported Supported types
The serializer supports a bunch of types by default, but there are limitations. Check the main
page Usage Hints for details about what is possible and what is not.

@section extending Extending the serializer
To extend the serializers functionality, the protected functions are the place to look. For
both serialization and deserialization, there are 5 methods each, with the following functionality:
- <b>...Variant:</b> Decides, where to go next, by analysing the given type and data. Calls one of
the other functions to perform the actual de/serialization, and verifies the resulted data meets
the expectations
- <b>...Object:</b> Performs `QObject <--> QJsonObject` conversions. Calls the variant method for
each of it's properties
- <b>...Gadget:</b> Performs `Q_GADGET <--> QJsonObject` conversions. Calls the variant method for
each of it's properties. Basically the same as the object one, but for gadet types
- <b>...List:</b> Performs `QList<T> <--> QJsonArray` conversions. Calls the variant method for
each element in the list
- <b>...Value:</b> Called for any other type, that does not match one of the three above. Tries to
convert whatever comes by using the build-in `QVariant <--> QJsonValue` conversions. See QJsonValue::fromVariant
and QJsonValue::toVariant for more details on the supported types
*/

/*!
@property QJsonSerializer::allowDefaultNull

@default{`false`}

Applies to deserialization only.<br/>
If set to `false`, a `null` json value can only be converted to a QObject (`nullptr`)! For value
types (including Q_GADGETs!), the conversion will fail instead. This is a strict mode, since for
value types, there is no null value.<br/>
If set to `true`, `null` is allowed for all types. If it's not a QObject, a default
constructed value will be used.

@note If you are deserializing json from external sources, it's possible they don't follow this
approach, and in order to get a working deserialization, you will have to enable this property.

@accessors{
	@readAc{allowDefaultNull()}
	@writeAc{setAllowDefaultNull()}
}
*/

/*!
@property QJsonSerializer::keepObjectName

@default{`false`}

Applies to serialization only.<br/>
By default, the QObject::objectName property will not be serialized for QObjects! If you need to
keep this information, set the property to `true`

@note If the `objectName` is contained in json, a deserialization will use that value, independent
of this property.

@accessors{
	@readAc{keepObjectName()}
	@writeAc{setKeepObjectName()}
}
*/

/*!
@fn QJsonSerializer::registerListConverters

@tparam T The type to register converters for

Performs the registration of converters for `QList<T> <--> QVariantList`. This conversion is a
requirement for the serializer, if you want to be able to serialize lists of a type. The function
calls the following methods for the given type:
- `QMetaType::registerConverter<QList<T>, QVariantList>()`
- `QMetaType::registerConverter<QVariantList, QList<T>>()`
- `QMetaType::registerComparators<QList<T>>()`

with a generic conversion using QVariant.

The following types are already registered by default:
<table>
<tr><th>Default list converters</th></tr>
<tr><td>bool</td></tr>
<tr><td>int</td></tr>
<tr><td>unsigned int</td></tr>
<tr><td>double</td></tr>
<tr><td>QChar</td></tr>
<tr><td>QString</td></tr>
<tr><td>long long</td></tr>
<tr><td>short</td></tr>
<tr><td>char</td></tr>
<tr><td>unsigned long</td></tr>
<tr><td>unsigned long long</td></tr>
<tr><td>unsigned short</td></tr>
<tr><td>signed char</td></tr>
<tr><td>unsigned char</td></tr>
<tr><td>float</td></tr>
<tr><td>QDate</td></tr>
<tr><td>QTime</td></tr>
<tr><td>QUrl</td></tr>
<tr><td>QDateTime</td></tr>
<tr><td>QUuid</td></tr>
<tr><td>QObject *</td></tr>
</table>
*/

/*!
@fn QJsonSerializer::serialize(const QVariant &) const

@param data The data to be serialized
@returns The serialized value
@throws QJsonSerializationException Thrown if the serialization fails
*/

/*!
@fn QJsonSerializer::serialize(const T &) const

@tparam T The type of the data to be serialized
@copydetails QJsonSerializer::serialize(const QVariant &) const
*/

/*!
@fn QJsonSerializer::serialize(const QList<T> &) const

@copydetails QJsonSerializer::serialize(const T &) const
*/

/*!
@fn QJsonSerializer::deserialize(const QJsonValue &, int, QObject*) const

@param json The data to be deserialized
@param metaTypeId The target type of the deserialization
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value, wrapped in QVariant
@throws QJsonDeserializationException Thrown if the deserialization fails
*/

/*!
@fn QJsonSerializer::deserialize(const QJsonObject &, QObject*) const

@tparam T The type of the data to be deserialized
@param json The data to be deserialized
@param parent The parent object of the result. Only used if the returend value is a QObject*
@returns The deserialized value
@throws QJsonDeserializationException Thrown if the deserialization fails
*/

/*!
@fn QJsonSerializer::deserialize(const QJsonArray &, QObject*) const

@copydetails QJsonSerializer::deserialize(const QJsonObject &, QObject*) const
*/
